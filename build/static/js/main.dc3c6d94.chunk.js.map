{"version":3,"sources":["components/Navbar/Navbar.js","components/Image/Image.js","utils/images.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","Image","onClick","chooseImage","src","source","alt","images","id","ref","Game","state","selected","your_score","high_score","status","shuffleList","shuffle","sort","Math","random","setState","determineScore","i","includes","resetGame","push","board","document","getElementById","classList","add","setTimeout","remove","newHighScore","this","map","img","index","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAeeA,MAZf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,eACX,wBAAIA,UAAU,eACV,4BACI,yD,YCMLC,MAXf,SAAeF,GACX,OACI,yBACIC,UAAU,aACVE,QAASH,EAAMI,YACfC,IAAKL,EAAMM,OACXC,IAAI,iBC0CDC,EAnDA,CACX,CACIC,GAAI,EACJC,IAAK,uDAET,CACID,GAAI,EACJC,IAAK,6EAET,CACID,GAAI,EACJC,IAAK,gDAET,CACID,GAAI,EACJC,IAAK,gDAET,CACID,GAAI,EACJC,IAAK,gDAET,CACID,GAAI,EACJC,IAAK,gDAET,CACID,GAAI,EACJC,IAAK,gDAET,CACID,GAAI,EACJC,IAAK,mFAET,CACID,GAAI,EACJC,IAAK,mFAET,CACID,GAAI,GACJC,IAAK,+EAET,CACID,GAAI,GACJC,IAAK,oHAET,CACID,GAAI,GACJC,IAAK,iDCuCEC,E,2MA/EXC,MAAQ,CACJJ,OAAQA,EACRK,SAAU,GACVC,WAAY,EACZC,WAAY,EACZC,OAAQ,+E,EAGZC,YAAc,WACV,IAAIC,EAAU,EAAKN,MAAMJ,OAAOW,MAAK,kBAAMC,KAAKC,SAAW,MAC3D,EAAKC,SAAS,CACVd,OAAQU,K,EAIhBK,eAAiB,SAACC,GACV,EAAKZ,MAAMC,SAASY,SAASD,EAAEf,IAC/B,EAAKiB,aAEL,EAAKd,MAAMC,SAASc,KAAKH,EAAEf,IAC3B,EAAKa,SAAS,CACVR,WAAY,EAAKF,MAAME,WAAa,EACpCE,OAAQ,4BAGhB,EAAKC,e,EAGTS,UAAY,WACR,IAAME,EAAQC,SAASC,eAAe,SAEtC,EAAKR,SAAS,CACVd,OAAQ,EAAKI,MAAMJ,OACnBK,SAAU,GACVC,WAAY,EACZE,OAAQ,2DAGZY,EAAMG,UAAUC,IAAI,WACpBC,YAAW,WACPL,EAAMG,UAAUG,OAAO,aACxB,KACH,EAAKC,gB,EAGTA,aAAe,WACP,EAAKvB,MAAME,WAAa,EAAKF,MAAMG,WACnC,EAAKO,SAAS,CACVP,WAAY,EAAKH,MAAME,aAG3B,EAAKQ,SAAS,CACVP,WAAY,EAAKH,MAAMG,c,wEAKzB,IAAD,OACL,OACI,yBAAKd,UAAU,QACX,yBAAKA,UAAU,SACVmC,KAAKxB,MAAMI,OACZ,2CAAiBoB,KAAKxB,MAAME,WAA5B,kBAAuDsB,KAAKxB,MAAMG,aAEtE,yBAAKN,GAAG,SACH2B,KAAKxB,MAAMJ,OAAO6B,KAAI,SAACC,EAAKC,GACzB,OACI,kBAAC,EAAD,CACIjC,OAAQgC,EAAI5B,IACZN,YAAa,kBAAM,EAAKmB,eAAee,e,GAvEpDE,IAAMC,WCWVC,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUF,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD6H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dc3c6d94.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <div className=\"navbar-cstm\">\r\n            <ul className=\"navbar-list\">\r\n                <li>\r\n                    <h1>Record Store Shopping</h1>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Image.css';\r\n\r\nfunction Image(props) {\r\n    return (\r\n        <img \r\n            className=\"image-item\" \r\n            onClick={props.chooseImage} \r\n            src={props.source}\r\n            alt=\"Game Choice\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default Image;","const images = [\r\n    {\r\n        id: 1,\r\n        ref: 'https://centralsquarerecords.com/Photo/418461375219'\r\n    },\r\n    {\r\n        id: 2,\r\n        ref: 'https://images-na.ssl-images-amazon.com/images/I/61lUneegouL._SL1200_.jpg'\r\n    },\r\n    {\r\n        id: 3,\r\n        ref: 'https://f4.bcbits.com/img/a2337835939_10.jpg'\r\n    },\r\n    {\r\n        id: 4,\r\n        ref: 'https://f4.bcbits.com/img/a0886287496_10.jpg'\r\n    },\r\n    {\r\n        id: 5,\r\n        ref: 'https://f4.bcbits.com/img/a2749105280_10.jpg'\r\n    },\r\n    {\r\n        id: 6,\r\n        ref: 'https://f4.bcbits.com/img/a2174795375_10.jpg'\r\n    },\r\n    {\r\n        id: 7,\r\n        ref: 'https://f4.bcbits.com/img/a0278585314_10.jpg'\r\n    },\r\n    {\r\n        id: 8,\r\n        ref: 'https://payload.cargocollective.com/1/4/158872/9317275/real-estate-days_800.jpg'\r\n    },\r\n    {\r\n        id: 9,\r\n        ref: 'https://static.stereogum.com/uploads/2018/08/Microcastle-1533316321-640x640.jpg'\r\n    },\r\n    {\r\n        id: 10,\r\n        ref: 'https://images-na.ssl-images-amazon.com/images/I/A19QFR%2BE1wL._SL1500_.jpg'\r\n    },\r\n    {\r\n        id: 11,\r\n        ref: 'https://www.udiscovermusic.com/wp-content/uploads/2019/04/Tame-Impala-Currents-album-cover-web-optimised-820.jpg'\r\n    },\r\n    {\r\n        id: 12,\r\n        ref: 'https://f4.bcbits.com/img/a1428711167_10.jpg'\r\n    }\r\n]\r\n\r\nexport default images;","import React from 'react';\r\nimport './Game.css';\r\nimport Image from '../Image/Image';\r\nimport images from '../../utils/images';\r\n\r\nclass Game extends React.Component {\r\n\r\n    state = {\r\n        images: images,\r\n        selected: [],\r\n        your_score: 0,\r\n        high_score: 0,\r\n        status: 'Click on an image below to earn points, but don\\'t click any more than once.'\r\n    };\r\n\r\n    shuffleList = () => {\r\n        let shuffle = this.state.images.sort(() => Math.random() - 0.5);\r\n        this.setState({\r\n            images: shuffle\r\n        })\r\n    }\r\n\r\n    determineScore = (i) => {\r\n        if (this.state.selected.includes(i.id)) {\r\n            this.resetGame();\r\n        } else {\r\n            this.state.selected.push(i.id);\r\n            this.setState({\r\n                your_score: this.state.your_score + 1,\r\n                status: 'You guessed correctly!'\r\n            })  \r\n        }\r\n        this.shuffleList();\r\n    }\r\n\r\n    resetGame = () => {\r\n        const board = document.getElementById('board');\r\n\r\n        this.setState({\r\n            images: this.state.images,\r\n            selected: [],\r\n            your_score: 0,\r\n            status: 'You guessed incorrectly and lost. Click to play again!'\r\n        })\r\n\r\n        board.classList.add('shakeup');\r\n        setTimeout(function() { \r\n            board.classList.remove('shakeup');\r\n        }, 1000);\r\n        this.newHighScore();\r\n    }\r\n\r\n    newHighScore = () => {\r\n        if (this.state.your_score > this.state.high_score) {\r\n            this.setState({\r\n                high_score: this.state.your_score\r\n            }) \r\n        } else {\r\n            this.setState({\r\n                high_score: this.state.high_score\r\n            }) \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"score\">\r\n                    {this.state.status}\r\n                    <h3>Your Score: {this.state.your_score} | High Score: {this.state.high_score}</h3>\r\n                </div>\r\n                <div id=\"board\">\r\n                    {this.state.images.map((img, index) => {\r\n                        return (\r\n                            <Image \r\n                                source={img.ref}\r\n                                chooseImage={() => this.determineScore(img)}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Game from './components/Game/Game';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}